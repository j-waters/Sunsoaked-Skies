import i from"../../web_modules/simplex-noise.js";var u=Phaser.Scene,v=Phaser.Geom.Point;import{RuinLocation as n,VillageLocation as o}from"../models/Location.js";var p=Phaser.Math.Vector2;console.log("");export const worldTypes={ISLANDS:{zoom:130,threshold:.5,exp:1.5,gradientZoom:1.5,elev2proportion:.8,elevationMod:1.7},CONTINENT:null};const q=a=>a,k=q({SNOW:{temperature:1,moisture:8,colour:"rgb(255,255,255)"},SNOWY_CONIFEROUS_FOREST:{temperature:1,moisture:4,colour:"rgb(255,255,255)"},CONIFEROUS_FOREST:{temperature:1,moisture:2,colour:"rgb(21,62,1)"},TUNDRA:{temperature:1,moisture:1,colour:"rgb(132,121,109)"},FOREST:{temperature:2,moisture:8,colour:"rgb(41,177,43)"},PLAINS:{temperature:6,moisture:4,colour:"rgb(93,201,95)"},SHRUBLAND:{temperature:2,moisture:2,colour:"rgb(157,170,81)"},TROPICAL_FOREST:{temperature:4,moisture:8,colour:"rgb(98,206,43)"},GRASSLAND:{temperature:4,moisture:2,colour:"rgb(190,198,82)"},DESSERT:{temperature:6,moisture:1,colour:"rgb(246,238,160)"},BEACH:{temperature:0,moisture:0,colour:"rgb(255,241,143)"},WATER:{temperature:0,moisture:0,colour:"rgb(63,161,213)",nonSolid:!0},DEEP_WATER:{temperature:0,moisture:0,colour:"rgb(48,144,196)",nonSolid:!0},BARE:{temperature:0,moisture:0,colour:"rgb(101,101,101)"},HILLS:{temperature:0,moisture:0,colour:"rgb(34,153,36)"}});export function generateSeed(){return Array.from({length:5},()=>Math.random().toString(36)[2]).join("")}export function generateLocations(a){let b=new l(a,512),c=[],d=0;for(;c.length<15;){let f=!1,e=b.randomPoint();if(!e.details.biome.nonSolid){for(const h of c)if(Phaser.Math.Distance.BetweenPoints(h.position,e.position)<50){d++,f=!0;break}if(f)continue;let g;e.details.biomeName==="BEACH"?g=new o(e.position):g=new n(e.position),c.push(g),d=0}if(d>1e3)break}return c}export function generateWorldTexture(a,b,c,d){return a.textures.exists(`_world/${b.seed}/${c}`)?(console.log("reusing texture"),a.textures.get(`_world/${b.seed}/${c}`)):a.textures.addCanvas(`_world/${b.seed}/${c}`,generateWorldGraphic(b,c,d))}export function generateWorldGraphic(a,b,c){let d=document.createElement("canvas"),f=d.getContext("2d"),e=new l(a,b,c);d.width=e.textureSize*e.tileSize,d.height=e.textureSize*e.tileSize;let g=e.worldSize/e.textureSize;for(let h=0;h<e.textureSize;h++)for(let j=0;j<e.textureSize;j++){let s=e.getAt(h*g,j*g);f.fillStyle=s.biome.colour,f.fillRect(h*e.tileSize,j*e.tileSize,e.tileSize,e.tileSize)}return f.fillStyle="red",d}class r{constructor(a,b,c,d){this.elevation=a,this.temperature=b,this.moisture=c,this.generator=d}get biomeName(){let a,b=this.elevation;if(b<0)b<-.5?a="DEEP_WATER":a="WATER";else{b<.1?a="BEACH":b<.6?a=this.moisture>.5?"FOREST":"PLAINS":b<.8?a="HILLS":b<.95?a="BARE":a="SNOW";let c=Object.values(k).filter(d=>d.moisture&this.snappedMoisture).find(d=>d.temperature&this.snappedTemperature)}return a}get biome(){return k[this.biomeName]}get snappedTemperature(){return Math.pow(2,Math.ceil(this.temperature*3)-1)}get snappedMoisture(){return Math.pow(2,Math.ceil(this.moisture*4)-1)}}class l{constructor(a,b,c){this.tileSize=2,this.world=a,this.textureSize=b,this.gs=c||worldTypes[this.world.worldType],this.elevationNoise=new i(this.seed+"e1"),this.elevationNoise2=new i(this.seed+"e2"),this.moistureNoise=new i(this.seed+"m"),this.temperatureNoise=new i(this.seed+"t"),this.pointRandom=new Phaser.Math.RandomDataGenerator(this.seed+"p")}get seed(){return this.world.seed}get worldSize(){return this.world.size}get zoom(){return this.gs.zoom}getAt(a,b){let c=this.elevationAt(a,b);return c<0&&(c=.01),c<this.threshold?c=-c/this.threshold:(c=(c-this.threshold)/(1-this.threshold),c*=this.gs.elevationMod),new r(c,this.temperatureAt(a,b),this.moistureAt(a,b),this)}get threshold(){return this.gs.threshold}randomPoint(){let a=new p(this.pointRandom.between(0,this.worldSize),this.pointRandom.between(0,this.worldSize));return{position:a,details:this.getAt(a.x,a.y)}}gradientAt(a,b){a=a/this.worldSize,b=b/this.worldSize;const c=f=>-(4*this.gs.gradientZoom)*(f-1)*f;let d=c(a)*c(b);return d>1&&(d=1),d}elevationAt(a,b){let c=this.elevationNoise.noise2D(a/this.zoom,b/this.zoom),d=this.elevationNoise2.noise2D(a*2/this.zoom,b*2/this.zoom),f=m((c+this.gs.elev2proportion*d)/(1+this.gs.elev2proportion));return f=Math.pow(f,this.gs.exp),f-(1-this.gradientAt(a,b))}moistureAt(a,b){let c=m(this.moistureNoise.noise2D(a/this.zoom*2,b/this.zoom*2));return c}temperatureAt(a,b){return this.elevationAt(a,b)}}function m(a){return a>1?a=1:a<-1&&(a=-1),(a+1)/2}

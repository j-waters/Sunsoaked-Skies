import a from"../../web_modules/simplex-noise.js";import{RuinLocation as p,VillageLocation as g}from"../models/Location.js";var N=Phaser.Scene,S=Phaser.Math.Vector2;console.log("");export const worldTypes={ISLANDS:{zoom:130,threshold:.5,exp:1.5,gradientZoom:1.5,elev2proportion:.8,elevationMod:1.7},CONTINENT:null};const f=e=>e,h=f({SNOW:{temperature:1,moisture:8,colour:"rgb(255,255,255)"},SNOWY_CONIFEROUS_FOREST:{temperature:1,moisture:4,colour:"rgb(255,255,255)"},CONIFEROUS_FOREST:{temperature:1,moisture:2,colour:"rgb(21,62,1)"},TUNDRA:{temperature:1,moisture:1,colour:"rgb(132,121,109)"},FOREST:{temperature:2,moisture:8,colour:"rgb(41,177,43)"},PLAINS:{temperature:6,moisture:4,colour:"rgb(93,201,95)"},SHRUBLAND:{temperature:2,moisture:2,colour:"rgb(157,170,81)"},TROPICAL_FOREST:{temperature:4,moisture:8,colour:"rgb(98,206,43)"},GRASSLAND:{temperature:4,moisture:2,colour:"rgb(190,198,82)"},DESSERT:{temperature:6,moisture:1,colour:"rgb(246,238,160)"},BEACH:{temperature:0,moisture:0,colour:"rgb(255,241,143)"},WATER:{temperature:0,moisture:0,colour:"rgb(63,161,213)",nonSolid:!0},DEEP_WATER:{temperature:0,moisture:0,colour:"rgb(48,144,196)",nonSolid:!0},BARE:{temperature:0,moisture:0,colour:"rgb(101,101,101)"},HILLS:{temperature:0,moisture:0,colour:"rgb(34,153,36)"}});export function generateSeed(){return Array.from({length:5},()=>Math.random().toString(36)[2]).join("")}export function generateLocations(e){const t=new m(e,512),o=[];let r=0;for(;o.length<15;){let s=!1;const i=t.randomPoint();if(!i.details.biome.nonSolid){for(const l of o)if(Phaser.Math.Distance.BetweenPoints(l.position,i.position)<50){r++,s=!0;break}if(s)continue;let n;i.details.biomeName==="BEACH"?n=new g(i.position):n=new p(i.position),o.push(n),r=0}if(r>1e3)break}return o}export function generateWorldTexture(e,t,o,r){return e.textures.exists(`_world/${t.seed}/${o}`)?(console.log("reusing texture"),e.textures.get(`_world/${t.seed}/${o}`)):e.textures.addCanvas(`_world/${t.seed}/${o}`,generateWorldGraphic(t,o,r))}export function generateWorldGraphic(e,t,o){const r=document.createElement("canvas"),s=r.getContext("2d"),i=new m(e,t,o);r.width=i.textureSize*i.tileSize,r.height=i.textureSize*i.tileSize;const n=i.worldSize/i.textureSize;for(let l=0;l<i.textureSize;l++)for(let u=0;u<i.textureSize;u++){const d=i.getAt(l*n,u*n);s.fillStyle=d.biome.colour,s.fillRect(l*i.tileSize,u*i.tileSize,i.tileSize,i.tileSize)}return s.fillStyle="red",r}class w{constructor(e,t,o,r){this.elevation=e,this.temperature=t,this.moisture=o,this.generator=r}get biomeName(){let e;const t=this.elevation;if(t<0)t<-.5?e="DEEP_WATER":e="WATER";else{t<.1?e="BEACH":t<.6?e=this.moisture>.5?"FOREST":"PLAINS":t<.8?e="HILLS":t<.95?e="BARE":e="SNOW";const o=Object.values(h).filter(r=>r.moisture&this.snappedMoisture).find(r=>r.temperature&this.snappedTemperature)}return e}get biome(){return h[this.biomeName]}get snappedTemperature(){return Math.pow(2,Math.ceil(this.temperature*3)-1)}get snappedMoisture(){return Math.pow(2,Math.ceil(this.moisture*4)-1)}}class m{constructor(e,t,o){this.tileSize=2,this.world=e,this.textureSize=t,this.gs=o||worldTypes[this.world.worldType],this.elevationNoise=new a(this.seed+"e1"),this.elevationNoise2=new a(this.seed+"e2"),this.moistureNoise=new a(this.seed+"m"),this.temperatureNoise=new a(this.seed+"t"),this.pointRandom=new Phaser.Math.RandomDataGenerator(this.seed+"p")}get seed(){return this.world.seed}get worldSize(){return this.world.size}get zoom(){return this.gs.zoom}getAt(e,t){let o=this.elevationAt(e,t);return o<0&&(o=.01),o<this.threshold?o=-o/this.threshold:(o=(o-this.threshold)/(1-this.threshold),o*=this.gs.elevationMod),new w(o,this.temperatureAt(e,t),this.moistureAt(e,t),this)}get threshold(){return this.gs.threshold}randomPoint(){const e=new S(this.pointRandom.between(0,this.worldSize),this.pointRandom.between(0,this.worldSize));return{position:e,details:this.getAt(e.x,e.y)}}gradientAt(e,t){e=e/this.worldSize,t=t/this.worldSize;const o=s=>-(4*this.gs.gradientZoom)*(s-1)*s;let r=o(e)*o(t);return r>1&&(r=1),r}elevationAt(e,t){const o=this.elevationNoise.noise2D(e/this.zoom,t/this.zoom),r=this.elevationNoise2.noise2D(e*2/this.zoom,t*2/this.zoom);let s=c((o+this.gs.elev2proportion*r)/(1+this.gs.elev2proportion));return s=Math.pow(s,this.gs.exp),s-(1-this.gradientAt(e,t))}moistureAt(e,t){const o=c(this.moistureNoise.noise2D(e/this.zoom*2,t/this.zoom*2));return o}temperatureAt(e,t){return this.elevationAt(e,t)}}function c(e){return e>1?e=1:e<-1&&(e=-1),(e+1)/2}

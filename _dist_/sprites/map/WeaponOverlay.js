var g=Phaser.Display.Color;import h from"../Segment.js";var m=Phaser.Math.Vector2;export class WeaponRangeOverlay extends h{constructor(b,c){super(b,c.angle,c.range,g.ValueToColor("rgb(137,30,64)"),.1,!0);this.weapon=c}setTo(b){this.setPosition(b.x,b.y),this.setRotation(b.rotation-Phaser.Math.DegToRad(this.weapon.angle)/2)}}export class WeaponTargetOverlay extends h{constructor(b,c){super(b,c.spread,c.range,g.ValueToColor("rgb(137,30,64)"),.3,!1);this.weapon=c}setTo(b,c){this.setPosition(b.x,b.y);let d=Phaser.Math.Angle.Normalize(Math.PI/2),a=Phaser.Math.Angle.Normalize(Phaser.Math.Angle.BetweenPoints(b.ship.position,c)-Phaser.Math.DegToRad(this.weapon.spread)/2-b.rotation),e=Phaser.Math.Angle.Normalize(-Phaser.Math.DegToRad(this.weapon.angle)/2),f=Phaser.Math.Angle.Normalize(+Phaser.Math.DegToRad(this.weapon.angle)/2-Phaser.Math.DegToRad(this.weapon.spread)),i=Phaser.Math.Angle.Normalize(e-Math.PI),j=Phaser.Math.Angle.Normalize(f-Math.PI);a<e&&a>Phaser.Math.Angle.Normalize(d-Math.PI)?a=e:a>f&&a<d?a=f:a<i&&a>d?a=i:a>j&&a<Phaser.Math.Angle.Normalize(d-Math.PI)&&(a=j),a=Phaser.Math.Angle.Normalize(a+b.rotation),this.setRotation(a),this.targetAngle=a+Phaser.Math.DegToRad(this.weapon.spread*k())}}function k(){return 1-Math.pow(1-2*Phaser.Math.RND.frac(),2)}

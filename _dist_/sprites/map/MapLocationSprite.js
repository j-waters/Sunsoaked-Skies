import r from"../../shaders/OutlinePipeline.js";var p=Phaser.Scene,o=Phaser.Display.Color;export default class t extends Phaser.GameObjects.Image{constructor(e,s){super(e,0,0,s.icon);this.location=s,this.parent=e;const i=e.mapSize/e.world.size;this.setDisplaySize(12*i,12*i),this.setPosition(this.location.position.x*i,this.location.position.y*i),this.setTint(Phaser.Display.Color.ValueToColor("rgb(186,96,71)").color),this.setNormalOutline(),this.setInteractive(),this.on(Phaser.Input.Events.POINTER_OVER,(n,a,l,h)=>{this.setHoverOutline()}),this.on(Phaser.Input.Events.POINTER_OUT,()=>{this.setNormalOutline()})}setNormalOutline(){this.setPipeline(t.OUTLINE_NORMAL),this.pipeline.setFloat2("uTextureSize",this.texture.getSourceImage().width,this.texture.getSourceImage().height)}setHoverOutline(){this.setPipeline(t.OUTLINE_HOVERED),this.pipeline.setFloat2("uTextureSize",this.texture.getSourceImage().width,this.texture.getSourceImage().height)}get icon(){return"map/ruin"}static setupPipelines(e){e.game.renderer instanceof Phaser.Renderer.WebGL.WebGLRenderer&&(e.game.renderer.addPipeline(this.OUTLINE_NORMAL,new r(e.game,o.ValueToColor("rgb(255, 255, 0)"),5)),e.game.renderer.addPipeline(this.OUTLINE_HOVERED,new r(e.game,o.ValueToColor("rgb(255,200,0)"),15)))}}t.OUTLINE_NORMAL="OUTLINE_NORMAL",t.OUTLINE_HOVERED="OUTLINE_HOVERED";

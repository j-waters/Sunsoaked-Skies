import{SceneBase as z}from"./SceneBase.js";import M from"../sprites/map/MapLocationSprite.js";import x from"../sprites/map/MapShipSprite.js";import T from"../models/weapons/Weapon.js";import I from"../sprites/map/Cursor.js";import{MovementAction as f}from"../models/MapAction.js";import C from"../sprites/map/GraphicOverlay.js";import j from"../sprites/map/Projectile.js";var B=Phaser.Curves.QuadraticBezier,V=Phaser.Math.Vector2,E=Phaser.Curves.CubicBezier,Z=Phaser.GameObjects.Graphics;export default class R extends z{constructor(){super(...arguments);this.mapSize=512*4}preload(){M.setupPipelines(this)}create(e){this.world=e.world,this.map=this.add.image(0,0,this.world.generateTexture(this,512)),this.map.setOrigin(0,0),this.map.setDisplaySize(this.mapSize,this.mapSize),this.map.texture.setFilter(Phaser.Textures.FilterMode.NEAREST),this.input.setDefaultCursor("url(assets/images/map/blank.svg), pointer"),this.world.locations.forEach(t=>{const i=new M(this,t);this.add.existing(i)}),this.playerShip=new x(this,this.dataStore.playerShip);const s=this.mapSize/this.world.size;this.playerShip.setDisplaySize(5*s,8*s),this.add.existing(this.playerShip),this.cursor=new I(this),this.selectedAction=this.dataStore.playerShip.movementAction,this.cursor.selectAction(this.selectedAction),this.add.existing(this.cursor),this.projectiles=this.add.group(),this.projectiles.runChildUpdate=!0,this.cameras.main.startFollow(this.playerShip),this.cameras.main.setZoom(7*(this.gameHeight/this.mapSize)),this.input.on(Phaser.Input.Events.POINTER_WHEEL,(t,i,r,a,d)=>{this.cameras.main.zoom+=-a*(this.gameHeight/this.mapSize)*.01,this.cameras.main.zoom>10*(this.gameHeight/this.mapSize)?this.cameras.main.zoom=10*(this.gameHeight/this.mapSize):this.cameras.main.zoom<1&&(this.cameras.main.zoom=1)}),this.overlay=new C(this),this.add.existing(this.overlay),this.input.on(Phaser.Input.Events.POINTER_DOWN,t=>this.pointerDown(t)),this.input.on(Phaser.Input.Events.POINTER_MOVE,(t,i)=>this.pointerMove(t,i)),this.events.on(Phaser.Scenes.Events.WAKE,()=>this.wake()),this.wake()}wake(){this.input.setDefaultCursor("url(assets/images/map/blank.svg), pointer")}pointerMove(e,s){const t=e.positionToCamera(this.cameras.main);this.cursor.setPosition(t.x,t.y),this.selectedAction instanceof f?this.handleMovementAction(e):(this.weaponRangeOverlay.setTo(this.playerShip),this.weaponTargetOverlay.setTo(this.playerShip,t))}handleMovementAction(e){const s=e.positionToCamera(this.cameras.main),t=A(this.playerShip.getCenter(),this.playerShip.ship.velocity.clone().setLength(this.playerShip.ship.turningModifier),s);this.overlay.drawProspectiveMovement(t),this.cursor.setRotation(t.getTangentAt(1).angle()-Math.PI/2)}pointerDown(e){const s=e.positionToCamera(this.cameras.main),t=A(this.playerShip.getCenter(),this.playerShip.ship.velocity.clone().setLength(this.playerShip.ship.turningModifier),s);this.selectedAction instanceof f?this.playerShip.moveTo(t):this.fire(this.weaponTargetOverlay.targetAngle)}fire(e){const s=new j(this,this.selectedAction,this.playerShip.getCenter(),e);this.projectiles.add(s,!0)}update(e,s){super.update(e,s),this.overlay.clear(),this.overlay.drawCurrentMovement(this.playerShip.ship),this.playerShip.update(),this.pointerMove(this.input.activePointer,[]),this.weaponRangeOverlay?.setTo(this.playerShip)}selectAction(e){this.weaponRangeOverlay?.destroy(),this.weaponTargetOverlay?.destroy(),e instanceof T&&(this.weaponRangeOverlay=e.getWeaponRangeOverlay(this),this.weaponTargetOverlay=e.getWeaponTargetOverlay(this),this.add.existing(this.weaponRangeOverlay),this.add.existing(this.weaponTargetOverlay)),this.selectedAction=e,this.cursor.selectAction(this.selectedAction),this.overlay.clear()}deselectAction(){this.weaponRangeOverlay?.destroy(),this.weaponTargetOverlay?.destroy(),this.selectedAction=this.dataStore.playerShip.movementAction,this.cursor.selectAction(this.selectedAction)}}function A(e,s,t,i){const r=e.clone().subtract(t);r.x=Math.abs(r.x),r.y=Math.abs(r.y);const a=Phaser.Math.Angle.Normalize(Phaser.Math.Angle.BetweenPoints(e,t)-s.angle()),d=Phaser.Math.Angle.Normalize(Math.PI/2-a),P=Phaser.Math.Distance.BetweenPoints(e,t)*Math.sin(d),l=e.clone().add(s.clone().setLength(P/2)),o=new B(e,l,t),v=o.getTangentAt(1);let p=v.angle();const S=s.angle()-Math.PI*1.5;let n=Phaser.Math.Angle.Normalize(p-S);a<Math.PI*1.5&&a>Math.PI?(n-=Math.PI*1.5-a,n<Math.PI/2&&(n=Math.PI/2)):a>Math.PI/2&&a<Math.PI&&(n+=a-Math.PI/2,n>Math.PI/2&&(n=Math.PI/2)),p=n+S;const h=s.clone();h.length()>t.clone().distance(e)/2&&h.setLength(t.clone().distance(e)/2);const O=h.clone().setAngle(p),c=e,m=e.clone().add(h),g=t.clone().subtract(O),y=t,u=new E(c,m,g,y);if(i){i.clear(),i.lineStyle(2,16711935,1),i.lineBetween(e.x,e.y,l.x,l.y),o.draw(i);const w=o.getEndPoint().add(v.setLength(40));i.lineStyle(1,16711680,1),i.lineBetween(o.getEndPoint().x,o.getEndPoint().y,w.x,w.y),i.lineStyle(1,65280,1),u.draw(i),i.lineStyle(1,255,1),i.lineBetween(c.x,c.y,m.x,m.y),i.lineBetween(g.x,g.y,y.x,y.y)}return u}
